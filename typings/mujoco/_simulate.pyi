from typing import ClassVar

class Mutex:
    def __init__(self, *args, **kwargs) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, arg0: object, arg1: object, arg2: object) -> None: ...

class Simulate:
    MAX_GEOM: ClassVar[int] = ...  # read-only
    droploadrequest: int
    load_error: str
    measured_slowdown: float
    speed_changed: bool
    ui0_enable: int
    ui1_enable: int
    def __init__(self, arg0: object, arg1: object, arg2: object, arg3: object, arg4: bool, arg5: object) -> None: ...
    def add_to_history(self) -> None: ...
    def destroy(self) -> None: ...
    def exit(self) -> None: ...
    def load(self, arg0: object, arg1: object, arg2: str) -> None: ...
    def load_message(self, arg0: str) -> None: ...
    def load_message_clear(self) -> None: ...
    def lock(self) -> Mutex: ...
    def render_loop(self) -> None: ...
    def sync(self) -> None: ...
    def uiloadrequest_decrement(self) -> None: ...
    def update_hfield(self, arg0: int) -> None: ...
    def update_mesh(self, arg0: int) -> None: ...
    def update_texture(self, arg0: int) -> None: ...
    @property
    def busywait(self) -> int: ...
    @property
    def ctrl_noise_rate(self) -> float: ...
    @property
    def ctrl_noise_std(self) -> float: ...
    @property
    def dropfilename(self) -> str: ...
    @property
    def exitrequest(self) -> int: ...
    @property
    def filename(self) -> str: ...
    @property
    def real_time_index(self) -> int: ...
    @property
    def refresh_rate(self) -> int: ...
    @property
    def run(self) -> int: ...
    @property
    def uiloadrequest(self) -> int: ...

def set_glfw_dlhandle(arg0: int) -> None: ...
